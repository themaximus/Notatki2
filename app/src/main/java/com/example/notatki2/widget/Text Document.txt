package com.example.notatki2.widget

import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProvider
import android.content.Context
import android.content.Intent
import android.net.Uri
import android.util.Log
import android.widget.RemoteViews
import com.example.notatki2.R

class YourWidgetProvider : AppWidgetProvider() {

    override fun onUpdate(
        context: Context,
        appWidgetManager: AppWidgetManager,
        appWidgetIds: IntArray
    ) {
        Log.d("YourWidgetProvider", "onUpdate. IDs: ${appWidgetIds.joinToString()}")
        for (appWidgetId in appWidgetIds) {
            updateAppWidgetInternal(context, appWidgetManager, appWidgetId)
        }
    }

    override fun onReceive(context: Context, intent: Intent) {
        super.onReceive(context, intent)
        Log.d("YourWidgetProvider", "onReceive: action = ${intent.action}")
        // Пока не будем обрабатывать кастомные actions здесь, чтобы упростить
    }

    // Переименовал, чтобы не было конфликта с методом onUpdate
    private fun updateAppWidgetInternal(
        context: Context,
        appWidgetManager: AppWidgetManager,
        appWidgetId: Int
    ) {
        Log.d("YourWidgetProvider", "updateAppWidgetInternal для ID: $appWidgetId")
        try {
            val views = RemoteViews(context.packageName, R.layout.widget_layout)
            views.setTextViewText(R.id.widget_title, context.getString(R.string.widget_title_text))

            // Настройка RemoteViewsService для ListView
            val serviceIntent = Intent(context, WidgetNotesService::class.java)
            serviceIntent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId)
            serviceIntent.data = Uri.parse(serviceIntent.toUri(Intent.URI_INTENT_SCHEME))

            views.setRemoteAdapter(R.id.widget_list_view, serviceIntent)
            views.setEmptyView(R.id.widget_list_view, R.id.widget_empty_view)

            // Пока уберем PendingIntents для кнопок, чтобы проверить базовое отображение
            // views.setOnClickPendingIntent(R.id.widget_header, ...)
            // views.setOnClickPendingIntent(R.id.widget_add_note_button_header, ...)
            // views.setPendingIntentTemplate(R.id.widget_list_view, ...)

            appWidgetManager.updateAppWidget(appWidgetId, views)
            // Уведомляем ListView, чтобы он запросил данные у Factory
            appWidgetManager.notifyAppWidgetViewDataChanged(appWidgetId, R.id.widget_list_view)
            Log.d("YourWidgetProvider", "Виджет ID $appWidgetId обновлен, notifyAppWidgetViewDataChanged вызван.")

        } catch (e: Exception) {
            Log.e("YourWidgetProvider", "Ошибка в updateAppWidgetInternal для ID $appWidgetId: ${e.message}", e)
        }
    }

    // onDeleted, onEnabled, onDisabled как были
    override fun onDeleted(context: Context, appWidgetIds: IntArray) {
        super.onDeleted(context, appWidgetIds)
        Log.d("YourWidgetProvider", "onDeleted. IDs: ${appWidgetIds.joinToString()}")
    }

    override fun onEnabled(context: Context) {
        super.onEnabled(context)
        Log.d("YourWidgetProvider", "onEnabled")
    }

    override fun onDisabled(context: Context) {
        super.onDisabled(context)
        Log.d("YourWidgetProvider", "onDisabled")
    }
}
